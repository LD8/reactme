{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["api","App","useState","query","setQuery","weather","setWeather","useEffect","fetch","then","response","json","data","console","log","className","avgTemp","type","placeholder","onChange","e","target","value","onKeyDown","key","result","city","name","country","sys","Math","round","main","temp","minTemp","temp_min","maxTemp","temp_max","sky","humidity","search","Date","toDateString","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"yKAGMA,G,KACC,oCADDA,EAEE,2CAGO,SAASC,IAAO,IAAD,EACFC,mBAAS,IADP,mBACrBC,EADqB,KACdC,EADc,OAEEF,mBAAS,IAFX,mBAErBG,EAFqB,KAEZC,EAFY,KAiC5B,OARAC,qBAAU,WACRH,EAAS,IAETI,MAAM,oDACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAI,OAAIC,QAAQC,IAAIF,QAC3B,CAACP,IAGF,yBAAKU,UAAWV,EAAQW,QAAU,GAAK,MAAQ,YAC7C,8BACE,yBAAKD,UAAU,UACb,2BACEE,KAAK,OACLC,YAAY,mBACZC,SAAU,SAAAC,GAAC,OAAIhB,EAASgB,EAAEC,OAAOC,QACjCA,MAAOnB,EACPoB,UAAW,SAAAH,GAAC,OAtCP,SAAAA,GACC,UAAVA,EAAEI,KACJhB,MAAM,GAAD,OAAIR,EAAJ,qBAAyBG,EAAzB,+BAAqDH,IACvDS,MAAK,SAAAG,GAEJ,OADAC,QAAQC,IAAIF,GACLA,EAAKD,UACbF,MAAK,SAAAgB,GAEJnB,EAAW,CACToB,KAAMD,EAAOE,KACbC,QAASH,EAAOI,IAAID,QACpBZ,QAASc,KAAKC,MAAMN,EAAOO,KAAKC,MAChCC,QAASJ,KAAKC,MAAMN,EAAOO,KAAKG,UAChCC,QAASN,KAAKC,MAAMN,EAAOO,KAAKK,UAChCC,IAAKb,EAAOpB,QAAQ,GAAG2B,KACvBO,SAAUd,EAAOO,KAAKO,cAuBNC,CAAOpB,OAG1Bf,EAAQqB,KACP,yBAAKX,UAAU,gBACb,yBAAKA,UAAU,QACZV,EAAQqB,KADX,KACmBrB,EAAQuB,SAE3B,yBAAKb,UAAU,SAAQ,IAAI0B,MAAOC,gBAClC,yBAAK3B,UAAU,mBACb,yBAAKA,UAAU,eAAeV,EAAQW,QAAtC,SACA,yBAAKD,UAAU,qBAAqBV,EAAQ6B,QAA5C,MAAwD7B,EAAQ+B,QAAhE,UAEF,yBAAKrB,UAAU,OAAOV,EAAQiC,KAC9B,yBAAKvB,UAAU,YAAf,aAAqCV,EAAQkC,SAA7C,MAGF,yBAAKxB,UAAU,gBACb,yBAAKA,UAAU,QAAf,iBACA,yBAAKA,UAAU,SAAQ,IAAI0B,MAAOC,gBAClC,yBAAK3B,UAAU,mBACb,yBAAKA,UAAU,eAAf,UACA,yBAAKA,UAAU,qBAAf,eAEF,yBAAKA,UAAU,OAAf,WACA,yBAAKA,UAAU,YAAf,kBC/DQ4B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB9C,MAAK,SAAA+C,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL9C,QAAQ8C,MAAMA,EAAMC,a","file":"static/js/main.fe103925.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\n\nconst api = {\n  key: \"861906255adc263b360c4e62669c4bb7\",\n  base: \"https://api.openweathermap.org/data/2.5/\"\n};\n\nexport default function App() {\n  const [query, setQuery] = useState(\"\");\n  const [weather, setWeather] = useState({});\n\n  const search = e => {\n    if (e.key === \"Enter\") {\n      fetch(`${api.base}weather?q=${query}&units=metric&APPID=${api.key}`)\n        .then(data => {\n          console.log(data)\n          return data.json()})\n        .then(result => {\n          // console.log(result);\n          setWeather({\n            city: result.name,\n            country: result.sys.country,\n            avgTemp: Math.round(result.main.temp),\n            minTemp: Math.round(result.main.temp_min),\n            maxTemp: Math.round(result.main.temp_max),\n            sky: result.weather[0].main,\n            humidity: result.main.humidity\n          });\n        });\n    }\n  };\n\n  useEffect(() => {\n    setQuery(\"\");\n    // console.log(weather);\n    fetch(`http://127.0.0.1:8000/api/task-list/?format=json`)\n      .then(response => response.json())\n      .then(data => console.log(data))\n  }, [weather]);\n\n  return (\n    <div className={weather.avgTemp > 16 ? \"app\" : \"app cold\"}>\n      <main>\n        <div className=\"search\">\n          <input\n            type=\"text\"\n            placeholder=\"Search a city...\"\n            onChange={e => setQuery(e.target.value)}\n            value={query}\n            onKeyDown={e => search(e)}\n          />\n        </div>\n        {weather.city ? (\n          <div className=\"weather-info\">\n            <div className=\"city\">\n              {weather.city}, {weather.country}\n            </div>\n            <div className=\"date\">{new Date().toDateString()}</div>\n            <div className=\"temperature-box\">\n              <div className=\"temperature\">{weather.avgTemp}째c</div>\n              <div className=\"temperature-range\">{weather.minTemp} - {weather.maxTemp}째c</div>\n            </div>\n            <div className=\"sky\">{weather.sky}</div>\n            <div className=\"humidity\">Humidity: {weather.humidity}%</div>\n          </div>\n        ) : (\n          <div className=\"weather-info\">\n            <div className=\"city\">City, Country</div>\n            <div className=\"date\">{new Date().toDateString()}</div>\n            <div className=\"temperature-box\">\n              <div className=\"temperature\">0째c</div>\n              <div className=\"temperature-range\">0 - 0째c</div>\n            </div>\n            <div className=\"sky\">Weather</div>\n            <div className=\"humidity\">Humidity(%)</div>\n          </div>\n        )}\n      </main>\n    </div>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}